%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% makes event-related potentials (erps) and also z-scored erps (zerps) (harder to interpret)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function ...
    [erp_trial,...
    erp_mean,...
    zerp,...
    baseline_erp_trial,...
    mean_of_prestimulus_segment_of_erp,...
    surrogate_erp_fit]=...
    wc_make_zerp_for_one_condition(...
    signal,...
    event_indices,...
    start_epoch_at_this_sample_point,...
    stop_epoch_at_this_sample_point,...
    start_baseline_at_this_sample_point,...
    stop_baseline_at_this_sample_point,...
    skip,totalTrials)

number_of_sample_points_in_signal=size(signal,2);
number_of_surrogate_runs=size(skip,2);
event_indices(find(event_indices<...   
    abs(start_epoch_at_this_sample_point)))=[];     %deletes event indices before epoch start time, so any event indices that don't have enough prestimulus interval
event_indices(find(event_indices>...
    number_of_sample_points_in_signal-...        %likes wise exclude epochs w/o enough post event time points
    abs(stop_epoch_at_this_sample_point)))=[];
number_of_epochs=length(event_indices);
number_of_sample_points_in_epoch=...
    length(...
    start_epoch_at_this_sample_point:...
    stop_epoch_at_this_sample_point);
number_of_sample_points_in_baseline=...
    length(...
    start_baseline_at_this_sample_point(1):...
    stop_baseline_at_this_sample_point(1))-1;

erp_trial=nan(number_of_sample_points_in_epoch,totalTrials,'single');
erp_mean=nan(number_of_sample_points_in_epoch,1,'single');
zerp=nan(size(erp_mean),'single');
surrogate_erp=nan(1,number_of_surrogate_runs,'single');
surrogate_erp_fit=nan(2,1,'single');
normalizer=1/number_of_epochs;
baseline_erp_trial=nan(number_of_sample_points_in_baseline,totalTrials,'single');
baseline_erp_mean=nan(number_of_sample_points_in_baseline,1,'single');

for e=1:number_of_epochs
    
    % each task epoch
    segment=signal(...
        event_indices(e)+...
        (start_epoch_at_this_sample_point:...
        stop_epoch_at_this_sample_point))';
    erp_trial(:,e)=segment;
    
    % each baseline epoch
    segment=signal(...    
        event_indices(e)+...
        (start_baseline_at_this_sample_point(e)+1:...
        stop_baseline_at_this_sample_point(e)))';
    baseline_erp_trial(:,e)=segment;
end

erp_mean=nanmean(erp_trial,2);
baseline_erp_mean=nanmean(baseline_erp_trial,2);

mean_of_prestimulus_segment_of_erp=mean(baseline_erp_mean);


for s=1:number_of_surrogate_runs
    surrogate_event_indices=...
        mod(event_indices+skip(s),...
        number_of_sample_points_in_signal);
    surrogate_event_indices(...    %gives random indices that never exceed number of sample points in signal 
        find(...     
        surrogate_event_indices==0))=...
        number_of_sample_points_in_signal;%if random value happened to correspond to the end of the dataset, mod = 0, but set to end of dataset.
    surrogate_erp(s)=nanmean(signal(surrogate_event_indices));
end

[surrogate_erp_fit(1),surrogate_erp_fit(2)]=...
    normfit(double(surrogate_erp));
zerp=(erp_mean-repmat(...              % z correct erps by comparing to surrogate runs
    surrogate_erp_fit(1),size(erp_mean)))./...    %subtracts erp from something like mean divided by sd of normal suurogate data
    repmat(surrogate_erp_fit(2),size(erp_mean));
erp_mean=erp_mean-...
    repmat(...     %removes baseline 
    mean_of_prestimulus_segment_of_erp,...
    1,size(erp_mean,2));
