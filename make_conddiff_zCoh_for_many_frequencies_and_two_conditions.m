function ...
    [conddiff_Coh,...
    conddiff_zCoh,...
    surrogate_conddiff_Coh_fit]=...
    make_conddiff_zCoh_for_many_frequencies_and_two_conditions(...
    analytic_amplitude_1,...
    analytic_amplitude_2,...
    event_indices_for_condition_1,...
    event_indices_for_condition_2,...
    start_epoch_at_this_sample_point,...
    stop_epoch_at_this_sample_point,...
    number_of_surrogate_runs);
%
% function ...
%     [conddiff_Coh,...
%     conddiff_zCoh,...
%     surrogate_conddiff_Coh_fit]=...
%     make_conddiff_zCoh_for_many_frequencies_and_two_conditions(...
%     analytic_amplitudes,...
%     event_indices_for_condition_1,...
%     event_indices_for_condition_2,...
%     start_epoch_at_this_sample_point,...
%     stop_epoch_at_this_sample_point,...
%     number_of_surrogate_runs);
%
% conddiff_Coh: event-related time-frequency
% for difference between 2 conditions
% conddiff_zCoh: zscored event-related time-frequency
% for difference between 2 conditions conditions
% (used to get p-value [ p = 2*normcdf(-abs(z),0,1) ]
% surrogate_conddiff_Coh_fit: mean and standard deviation
% used to convert conddiff_Coh to conddiff_zCoh

%analytic_amplitudes=abs(analytic_amplitudes);  %makes positive
number_of_frequencies=...                      %rows of analytic amp are freq
    size(analytic_amplitude_1,1);
number_of_sample_points_in_signal=...
    size(analytic_amplitude_1,2);

event_indices_for_condition_1(...
    find(event_indices_for_condition_1<...      %taking out epochs too early or late in data
    abs(start_epoch_at_this_sample_point)))=[];
event_indices_for_condition_1(...
    find(event_indices_for_condition_1>...
    number_of_sample_points_in_signal-...
    abs(stop_epoch_at_this_sample_point)))=[];

event_indices_for_condition_2(...
    find(event_indices_for_condition_2<...
    abs(start_epoch_at_this_sample_point)))=[];
event_indices_for_condition_2(...
    find(event_indices_for_condition_2>...
    number_of_sample_points_in_signal-...
    abs(stop_epoch_at_this_sample_point)))=[];

number_of_epochs_for_condition_1=...
    length(event_indices_for_condition_1);
number_of_epochs_for_condition_2=...
    length(event_indices_for_condition_2);
total_number_of_epochs_for_both_conditions=...
    number_of_epochs_for_condition_1+...
    number_of_epochs_for_condition_2;

epoch_indices=...
    start_epoch_at_this_sample_point:...
    stop_epoch_at_this_sample_point;
number_of_sample_points_in_epoch=length(epoch_indices);

conddiff_Coh=zeros(...
    number_of_frequencies,...
    number_of_sample_points_in_epoch,'single');
conddiff_zCoh=zeros(size(conddiff_Coh),'single');
surrogate_conddiff_Coh_fit=zeros(...
    number_of_frequencies,...
    number_of_sample_points_in_epoch,...
    2,'single');

% Epochs for channel 1
epoch_1=zeros(...
    number_of_frequencies,...
    number_of_sample_points_in_epoch,...
    total_number_of_epochs_for_both_conditions,...
    'single');
% Epochs for channel 2
epoch_2=zeros(...
    number_of_frequencies,...
    number_of_sample_points_in_epoch,...
    total_number_of_epochs_for_both_conditions,...
    'single');

for e=1:number_of_epochs_for_condition_1   %feeds epoched in time freq data into epochs
    epoch_1(:,:,e)=...
        analytic_amplitude_1(:,...
        event_indices_for_condition_1(e)+epoch_indices);
    epoch_2(:,:,e)=...
        analytic_amplitude_2(:,...
        event_indices_for_condition_1(e)+epoch_indices);
end

for e=1:number_of_epochs_for_condition_2    %same as above but add to end of epochs matrix (after epoch 1
    epoch_1(:,:,...
        number_of_epochs_for_condition_1+e)=...
        analytic_amplitude_1(:,...
        event_indices_for_condition_2(e)+epoch_indices);
    epoch_2(:,:,...
        number_of_epochs_for_condition_1+e)=...
        analytic_amplitude_2(:,...
        event_indices_for_condition_2(e)+epoch_indices);
end

% Epochs for channel 1 and 2 for condition 1
A1=epoch_1(:,:,1:number_of_epochs_for_condition_1);
A2=epoch_2(:,:,1:number_of_epochs_for_condition_1);

% Epochs for channel 1 and 2 for condition 2
B1=epoch_1(:,:,number_of_epochs_for_condition_1+...
    (1:number_of_epochs_for_condition_2));
B2=epoch_2(:,:,number_of_epochs_for_condition_1+...
    (1:number_of_epochs_for_condition_2));

% This one is PLV ...
%conddiff_Coh=...       %subtracts mean of epochs for condition one from condition 2, across third dimension, which is epochs, so take means of both kinds of epochs and subtracts them
%     abs( mean( (A1.*conj(A2))./(abs(A1).*abs(A2)),3 ) ) - ...
%     abs( mean( (B1.*conj(B2))./(abs(B1).*abs(B2)),3 ) );

% Coherence for condition 1
A_temp_coh = mean((A1.*conj(A2)),3)./ sqrt( mean((A1.*conj(A1)),3) .* mean((A2.*conj(A2)),3));
% Coherence for condition 2
B_temp_coh = mean((B1.*conj(B2)),3)./ sqrt( mean((B1.*conj(B1)),3) .* mean((B2.*conj(B2)),3));
% Coherence difference between conditions 
conddiff_Coh=...       %subtracts mean of epochs for condition one from condition 2, across third dimension, which is epochs, so take means of both kinds of epochs and subtracts them
        abs(A_temp_coh)-abs(B_temp_coh);


    surrogate_conddiff_Coh=zeros(...
    number_of_frequencies,...
    number_of_sample_points_in_epoch,...
    number_of_surrogate_runs,...
    'single');

for s=1:number_of_surrogate_runs    %makes epoched surrogate runs for both conditions
    surrogate_inds=randperm(...
        total_number_of_epochs_for_both_conditions);
% tic


   % Randomnly pick conditions 
    
   A1=epoch_1(:,:,surrogate_inds(1:number_of_epochs_for_condition_1));
   A2=epoch_2(:,:,surrogate_inds(1:number_of_epochs_for_condition_1));
 
    B1=epoch_1(:,:, surrogate_inds(number_of_epochs_for_condition_1+...
        (1:number_of_epochs_for_condition_2)));
    B2=epoch_2(:,:, surrogate_inds(number_of_epochs_for_condition_1+...
        (1:number_of_epochs_for_condition_2)));

    A_temp_coh = mean((A1.*conj(A2)),3)./ sqrt( mean((A1.*conj(A1)),3) .* mean((A2.*conj(A2)),3));
    B_temp_coh = mean((B1.*conj(B2)),3)./ sqrt( mean((B1.*conj(B1)),3) .* mean((B2.*conj(B2)),3));

    
    surrogate_conddiff_Coh(:,:,s)=...
        abs(A_temp_coh)-abs(B_temp_coh);

end
% 
%     A_temp_coh_full = mean((A1_temp.*conj(A2_temp)),3)./ sqrt( mean((A1_temp.*conj(A1_temp)),3) .* mean((A2_temp.*conj(A2_temp)),3));
%     B_temp_coh_full = mean((B1_temp.*conj(B2_temp)),3)./ sqrt( mean((B1_temp.*conj(B1_temp)),3) .* mean((B2_temp.*conj(B2_temp)),3));
%     diff_temp_coh=abs(A_temp_coh_full)-abs(B_temp_coh_full);
% 
%     surrogate_conddiff_Coh_fit(:,:,1)=...
%     mean(diff_temp_coh);

    
    surrogate_conddiff_Coh_fit(:,:,1)=...
    mean(surrogate_conddiff_Coh,3);

% surrogate_conddiff_Coh_fit_full(:,:,1)=...
%     mean(diff_temp_coh);


for f=1:number_of_frequencies

%     surrogate_conddiff_Coh_fit(f,:,2)=...
%         std(diff_temp_coh);
% % 
% %     
    surrogate_conddiff_Coh_fit(f,:,2)=...
        std(squeeze(surrogate_conddiff_Coh(f,:,:)),0,2);
% 
%     surrogate_conddiff_Coh_fit_full(f,:,2)=...
%         std(diff_temp_coh);
% 

end

conddiff_zCoh=(conddiff_Coh-...
    squeeze(surrogate_conddiff_Coh_fit(:,:,1)))./...
    squeeze(surrogate_conddiff_Coh_fit(:,:,2));

surrogate_conddiff_Coh_fit=squeeze(surrogate_conddiff_Coh_fit);
