function ...
    [conddiff_ertf,...
    conddiff_zertf,...
    surrogate_conddiff_ertf_fit]=...
    wc_make_conddiff_zertf_for_many_frequencies_and_two_conditions(...
    analytic_amplitudes,...
    event_indices_for_condition_1,...
    event_indices_for_condition_2,...
    start_epoch_at_this_sample_point,...
    stop_epoch_at_this_sample_point,...
    number_of_surrogate_runs);
%  
% function ...
%     [conddiff_ertf,...
%     conddiff_zertf,...
%     surrogate_conddiff_ertf_fit]=...
%     make_conddiff_zertf_for_many_frequencies_and_two_conditions(...
%     analytic_amplitudes,...
%     event_indices_for_condition_1,...
%     event_indices_for_condition_2,...
%     start_epoch_at_this_sample_point,...
%     stop_epoch_at_this_sample_point,...
%     number_of_surrogate_runs);
% 
% conddiff_ertf: event-related time-frequency
% for difference between 2 conditions
% conddiff_zertf: zscored event-related time-frequency
% for difference between 2 conditions conditions
% (used to get p-value [ p = 2*normcdf(-abs(z),0,1) ]
% surrogate_conddiff_ertf_fit: mean and standard deviation
% used to convert conddiff_ertf to conddiff_zertf

analytic_amplitudes=abs(analytic_amplitudes);  %makes positive (takes amplitude)
number_of_frequencies=...                      %rows of analytic amp are freq
    size(analytic_amplitudes,1);
number_of_sample_points_in_signal=...
    size(analytic_amplitudes,2);

event_indices_for_condition_1(...
    find(event_indices_for_condition_1<...      %taking out epochs too early or late in data
    abs(start_epoch_at_this_sample_point)))=[];
event_indices_for_condition_1(...
    find(event_indices_for_condition_1>...
    number_of_sample_points_in_signal-...
    abs(stop_epoch_at_this_sample_point)))=[];

event_indices_for_condition_2(...
    find(event_indices_for_condition_2<...
    abs(start_epoch_at_this_sample_point)))=[];
event_indices_for_condition_2(...
    find(event_indices_for_condition_2>...
    number_of_sample_points_in_signal-...
    abs(stop_epoch_at_this_sample_point)))=[];

number_of_epochs_for_condition_1=...
    length(event_indices_for_condition_1);
number_of_epochs_for_condition_2=...
    length(event_indices_for_condition_2);
total_number_of_epochs_for_both_conditions=...
    number_of_epochs_for_condition_1+...
    number_of_epochs_for_condition_2;

epoch_indices=...
    start_epoch_at_this_sample_point:...
    stop_epoch_at_this_sample_point;
number_of_sample_points_in_epoch=length(epoch_indices);

conddiff_ertf=zeros(...
    number_of_frequencies,...
    number_of_sample_points_in_epoch,'single');
conddiff_zertf=zeros(size(conddiff_ertf),'single');
surrogate_conddiff_ertf_fit=zeros(...
    number_of_frequencies,...
    number_of_sample_points_in_epoch,...
    2,'single');

epochs=zeros(...
    number_of_frequencies,...
    number_of_sample_points_in_epoch,...
    total_number_of_epochs_for_both_conditions,...
    'single');
for e=1:number_of_epochs_for_condition_1   %feeds epoched in time freq data into epochs 
    epochs(:,:,e)=...
        analytic_amplitudes(:,...
        event_indices_for_condition_1(e)+epoch_indices);
end
for e=1:number_of_epochs_for_condition_2    %same as above but add to end of epochs matrix (after epoch 1
    epochs(:,:,...
        number_of_epochs_for_condition_1+e)=...
        analytic_amplitudes(:,...
        event_indices_for_condition_2(e)+epoch_indices);
end


conddiff_ertf=...       %subtracts mean of epochs for condition one from condition 2, across third dimension, which is epochs, so take means of both kinds of epochs and subtracts them
    mean(epochs(:,:,...
    1:number_of_epochs_for_condition_1),3)-...
    mean(epochs(:,:,...
    number_of_epochs_for_condition_1+...
    (1:number_of_epochs_for_condition_2)),3);

%%%%% THIS PORTION OF CODE LOOPS THROUGH EACH SURROGATE RUN - SLOWER %%%%%%
tic
surrogate_conddiff_ertf=zeros(...
    number_of_frequencies,...
    number_of_sample_points_in_epoch,...
    number_of_surrogate_runs,...
    'single');

for s=1:number_of_surrogate_runs    %makes epoched surrogate runs for both conditions (swapping labels ~5000 times)
    surrogate_inds=randperm(...
        total_number_of_epochs_for_both_conditions);
    surrogate_conddiff_ertf(:,:,s)=...
        mean(epochs(:,:,...
        surrogate_inds(...
        1:number_of_epochs_for_condition_1)),3)-...
        mean(epochs(:,:,...
        surrogate_inds(...
        number_of_epochs_for_condition_1+...
        (1:number_of_epochs_for_condition_2))),3);
   if mod(s,100)==0
       disp(number_of_surrogate_runs-s)
   end
end

surrogate_conddiff_ertf_fit(:,:,1)=... %find the average with swapped labels
    mean(surrogate_conddiff_ertf,3);

%%%%% THIS PORTION OF CODE CHUNKS SURROGATE RUNS - MORE MEMORY REQUIRED %%%%%%

% sub_surrogate_runs=100; %divide up surrogate runs; larger number requires more RAM
% 
% for abc=1:number_of_surrogate_runs/sub_surrogate_runs
% 
%     surrogate_conddiff_ertf=zeros(...
%     number_of_frequencies,...
%     number_of_sample_points_in_epoch,...
%     number_of_epochs_for_condition_1+number_of_epochs_for_condition_2,...
%     sub_surrogate_runs,...
%     'single');
% 
% for s=1:sub_surrogate_runs   %makes epoched surrogate runs for both conditions (swapping labels ~5000 times)
%     surrogate_inds=randperm(...
%         total_number_of_epochs_for_both_conditions);
%     
%     surrogate_conddiff_ertf(:,:,1:number_of_epochs_for_condition_1,s)=...
%         epochs(:,:,...
%         surrogate_inds(...
%         1:number_of_epochs_for_condition_1));
%     
%      surrogate_conddiff_ertf(:,:,number_of_epochs_for_condition_1+1:total_number_of_epochs_for_both_conditions,s)=...
%         epochs(:,:,...
%         surrogate_inds(...
%         number_of_epochs_for_condition_1+...
%         (1:number_of_epochs_for_condition_2)));
% %    if mod(s,100)==0
% %        disp(number_of_surrogate_runs-s)
% %    end
% end
% 
% surrogate_conddiff_ertf=squeeze(mean(surrogate_conddiff_ertf(:,:,1:number_of_epochs_for_condition_1,:),3))...
%     -squeeze(mean(surrogate_conddiff_ertf(:,:,number_of_epochs_for_condition_1+1:number_of_epochs_for_condition_2,:),3));
% 
% temp_surrogate_ertf(:,:,:,abc)=surrogate_conddiff_ertf;
% 
% disp(abc);
% end
% 
% clear surrogate_conddiff_ertf;
% surrogate_conddiff_ertf=squeeze(mean(temp_surrogate_ertf,3));


for f=1:number_of_frequencies
    surrogate_conddiff_ertf_fit(f,:,2)=...
    std(squeeze(surrogate_conddiff_ertf(f,:,:)),0,2); %find sd with swapped labels
end




conddiff_zertf=(conddiff_ertf-...
    squeeze(surrogate_conddiff_ertf_fit(:,:,1)))./... %subtract average with swapped labels, divide by sd
    squeeze(surrogate_conddiff_ertf_fit(:,:,2));

surrogate_conddiff_ertf_fit=squeeze(surrogate_conddiff_ertf_fit);
toc